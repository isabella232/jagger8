<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010-2012 Grid Dynamics Consulting Services, Inc, All Rights Reserved
  ~ http://www.griddynamics.com
  ~
  ~ This library is free software; you can redistribute it and/or modify it under the terms of
  ~ the GNU Lesser General Public License as published by the Free Software Foundation; either
  ~ version 2.1 of the License, or any later version.
  ~
  ~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  ~ AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  ~ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  ~ DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
  ~ FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  ~ DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  ~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  ~ CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  ~ OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  ~ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd">

    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

    <bean class="com.griddynamics.jagger.xml.ProviderBeanFactoryPostProcessor"/>

    <bean class="com.griddynamics.jagger.util.PropertiesResolver">
        <property name="registry" ref="propertiesResolverRegistry"/>
        <property name="resources">
            <list>
                <value>configuration/master/session.properties</value>
            </list>
        </property>
    </bean>

    <bean id="master" class="com.griddynamics.jagger.master.Master">
        <property name="configuration" ref="${chassis.master.session.configuration.bean.name}"/>
        <property name="coordinator" ref="coordinator"/>
        <property name="taskIdProvider" ref="taskIdProvider"/>
        <property name="sessionIdProvider" ref="sessionIdProvider"/>
        <property name="reconnectPeriod" value="${chassis.coordinator.reconnect.period}"/>
        <property name="distributorRegistry" ref="distributorRegistry"/>
        <property name="keyValueStorage" ref="h2KeyValueStorage"/>
        <property name="reportingService" ref="reportingService"/>
        <property name="conditions" ref="conditions"/>
        <property name="executor" ref="coreExecutor"/>
        <property name="dynamicPlotGroups" ref="monitoringPlotGroupsDyn"/>
        <property name="agentStopManagementProps">
            <map>
                <entry key="WAIT_BEFORE" value="20000"/>
                <entry key="SET_JMX_METRICS">
                    <bean class="java.util.ArrayList">
                        <!-- Empty array -->
                    </bean>
                </entry>
                <!--<entry key="HALT" value="true"/>-->
            </map>

        </property>
        <property name="timeoutConfiguration" ref="masterTimeoutConfiguration"/>
        <property name="logReader" ref="bufferedLogReader"/>
        <property name="logWriter" ref="bufferedLogWriter"/>
        <property name="generalNodeInfoAggregator" ref="generalNodeInfoAggregator"/>
        <property name="databaseValidator" ref="databaseValidator"/>
        <property name="metaDataStorage" ref="metaDataStorage"/>
        <property name="databaseService" ref="databaseService"/>
        <property name="decisionMakerDistributionListener" ref="decisionMakerDistributionListener"/>
    </bean>

    <bean id="distributionStartTimeTimeout" class="com.griddynamics.jagger.util.Timeout">
        <property name="value" value="${chassis.master.distribution.start}"/>
        <property name="name"  value="chassis.master.distribution.start"/>
    </bean>
    <bean id="distributionStopTimeTimeout" class="com.griddynamics.jagger.util.Timeout">
        <property name="value" value="${chassis.master.distribution.stop}"/>
        <property name="name"  value="chassis.master.distribution.stop"/>
    </bean>
    <bean id="taskExecutionTimeTimeout" class="com.griddynamics.jagger.util.Timeout">
        <property name="value" value="${chassis.master.task.maxtime}"/>
        <property name="name"  value="chassis.master.task.maxtime"/>
    </bean>
    <bean id="nodeAwaitTimeTimeout" class="com.griddynamics.jagger.util.Timeout">
        <property name="value" value="${chassis.master.node.awaittime}"/>
        <property name="name"  value="chassis.master.node.awaittime"/>
    </bean>

    <bean id="masterTimeoutConfiguration" class="com.griddynamics.jagger.master.MasterTimeoutConfiguration">
        <property name="distributionStartTime" ref="distributionStartTimeTimeout"/>
        <property name="distributionStopTime" ref="distributionStopTimeTimeout"/>
        <property name="taskExecutionTime" ref="taskExecutionTimeTimeout"/>
        <property name="nodeAwaitTime" ref="nodeAwaitTimeTimeout"/>
    </bean>

    <bean id="distributorRegistry" class="com.griddynamics.jagger.master.ConfigurableDistributorRegistry">
        <property name="distributors">
            <map>
                <entry key="com.griddynamics.jagger.engine.e1.scenario.WorkloadTask"
                       value-ref="workloadTaskDistributor"/>
                <entry key="com.griddynamics.jagger.master.CompositeTask"
                       value-ref="compositeTaskDistributor"/>
                <entry key="com.griddynamics.jagger.monitoring.MonitoringTask"
                       value-ref="monitoringTaskDistributor"/>
            </map>
        </property>

    </bean>

    <bean id="workloadTaskDistributor"
          class="com.griddynamics.jagger.engine.e1.scenario.WorkloadTaskDistributor">
        <property name="logInterval" value="${chassis.logging.period}"/>
        <property name="timeoutsConfiguration" ref="timeoutsConfiguration" />
        <property name="taskExecutionStatusProvider" ref="taskStatusProvider"/>
    </bean>

    <bean id="compositeTaskDistributor" class="com.griddynamics.jagger.master.CompositeTaskDistributor">
        <property name="distributorRegistry" ref="distributorRegistry"/>
        <property name="taskIdProvider" ref="taskIdProvider"/>
        <property name="timeoutsConfiguration" ref="timeoutsConfiguration" />
        <property name="taskExecutionStatusProvider" ref="taskStatusProvider"/>
    </bean>

    <bean id="conditions" class="com.griddynamics.jagger.master.Conditions">
        <property name="monitoringEnable" value="${chassis.conditions.monitoring.enable}"/>
        <property name="minAgentsCount" value="${chassis.conditions.min.agents.count}"/>
        <property name="minKernelsCount" value="${chassis.conditions.min.kernels.count}"/>
    </bean>

    <bean id="taskIdProvider" class="com.griddynamics.jagger.master.ThreadSafeTaskIdProvider"/>

    <bean id="taskStatusProvider" class="com.griddynamics.jagger.master.TaskExecutionStatusProvider"/>

    <bean id="monitoringTaskDistributor" class="com.griddynamics.jagger.monitoring.MonitoringTaskDistributor">
        <property name="ttl" value="${chassis.monitoring.command.execution.ttl}"/>
        <property name="taskExecutionStatusProvider" ref="taskStatusProvider"/>
    </bean>

    <bean id="generalNodeInfoAggregator" class="com.griddynamics.jagger.engine.e1.aggregator.session.GeneralNodeInfoAggregator">
        <property name="hibernateTemplate" ref="hibernateTemplate"/>
        <property name="nodeCollectInfoTime" ref="nodeCollectInfoTimeTimeout"/>
    </bean>

    <bean id="nodeCollectInfoTimeTimeout" class="com.griddynamics.jagger.util.Timeout">
        <property name="value" value="${chassis.master.collect.node.info.awaittime}"/>
        <property name="name"  value="chassis.master.collect.node.info.awaittime"/>
    </bean>

    <bean id="databaseValidator" class="com.griddynamics.jagger.master.database.DatabaseValidator">
        <property name="hibernateTemplate" ref="hibernateTemplate"/>
    </bean>

    <bean id="metaDataStorage" class="com.griddynamics.jagger.engine.e1.services.SessionMetaDataStorage"/>


</beans>




