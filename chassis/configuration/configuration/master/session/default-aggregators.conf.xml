<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010-2012 Grid Dynamics Consulting Services, Inc, All Rights Reserved
  ~ http://www.griddynamics.com
  ~
  ~ This library is free software; you can redistribute it and/or modify it under the terms of
  ~ the GNU Lesser General Public License as published by the Free Software Foundation; either
  ~ version 2.1 of the License, or any later version.
  ~
  ~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  ~ AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  ~ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  ~ DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
  ~ FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  ~ DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  ~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  ~ CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  ~ OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  ~ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="e1ScenarioAggregator" class="com.griddynamics.jagger.engine.e1.aggregator.workload.WorkloadAggregator">
        <property name="hibernateTemplate" ref="hibernateTemplate"/>
        <property name="keyValueStorage" ref="h2KeyValueStorage"/>
        <property name="databaseService" ref="databaseService"/>

        <property name="saveStandardMetricsWithNewModel" value="${chassis.enable.new.model.for.standard.metric}"/>
        <property name="saveStandardMetricsWithOldModel" value="${chassis.enable.old.model.for.standard.metric}"/>
    </bean>

    <bean id="basicAggregator" class="com.griddynamics.jagger.engine.e1.aggregator.session.BasicAggregator">
        <property name="hibernateTemplate" ref="hibernateTemplate"/>
        <property name="keyValueStorage" ref="h2KeyValueStorage"/>
        <property name="taskExecutionStatusProvider" ref="taskStatusProvider"/>
        <property name="sessionMetaDataStorage" ref="metaDataStorage"/>
    </bean>

    <bean id="decisionMakerDistributionListener" class="com.griddynamics.jagger.master.DecisionMakerDistributionListener">
        <property name="hibernateTemplate" ref="hibernateTemplate"/>
    </bean>

    <bean id="standardPercentilesGlobal" class="java.util.ArrayList">
        <constructor-arg>
            <list>
                <value>40</value>
                <value>50</value>
                <value>60</value>
                <value>70</value>
                <value>80</value>
                <value>85</value>
                <value>90</value>
                <value>95</value>
                <value>99</value>
            </list>
        </constructor-arg>
    </bean>

    <bean id="standardPercentilesTimeSeries" class="java.util.ArrayList">
        <constructor-arg>
            <list>
                <value>40</value>
                <value>50</value>
                <value>60</value>
                <value>70</value>
                <value>80</value>
                <value>90</value>
                <value>95</value>
                <value>99</value>
            </list>
        </constructor-arg>
    </bean>

    <bean id="durationIntervalSizeProvider_count" class="com.griddynamics.jagger.reporting.interval.CalculatedIntervalSizeProvider" lazy-init="true">
        <constructor-arg value="${chassis.engine.e1.reporting.task.point.count}"/>
    </bean>

    <bean id="durationIntervalSizeProvider_interval" class="com.griddynamics.jagger.reporting.interval.FixedIntervalSizeProvider" lazy-init="true">
        <constructor-arg value="${chassis.engine.e1.reporting.task.point.interval}"/>
    </bean>

    <bean id="durationLogProcessor" class="com.griddynamics.jagger.engine.e1.aggregator.workload.DurationLogProcessor">
        <property name="hibernateTemplate" ref="hibernateTemplate"/>
        <property name="logAggregator" ref="chronologyLogAggregator"/>
        <property name="sessionIdProvider" ref="sessionIdProvider"/>
        <property name="intervalSizeProvider" ref="durationIntervalSizeProvider_${chassis.engine.e1.reporting.task.type}"/>

        <property name="logReader"  ref="bufferedLogReader"/>

        <property name="timeWindowPercentilesKeys" ref="standardPercentilesTimeSeries"/>
        <property name="globalPercentilesKeys" ref="standardPercentilesGlobal"/>
        <property name="keyValueStorage" ref="h2KeyValueStorage"/>
        <property name="databaseService" ref="databaseService"/>

        <property name="saveStandardMetricsWithNewModel" value="${chassis.enable.new.model.for.standard.metric}"/>
        <property name="saveStandardMetricsWithOldModel" value="${chassis.enable.old.model.for.standard.metric}"/>
    </bean>

    <bean id="metricIntervalSizeProvider_count" class="com.griddynamics.jagger.reporting.interval.CalculatedIntervalSizeProvider" lazy-init="true">
        <constructor-arg value="${chassis.engine.e1.reporting.task.point.count}"/>
    </bean>

    <bean id="metricIntervalSizeProvider_interval" class="com.griddynamics.jagger.reporting.interval.FixedIntervalSizeProvider" lazy-init="true">
        <constructor-arg value="${chassis.engine.e1.reporting.task.point.interval}"/>
    </bean>

    <bean id="metricLogProcessor" class="com.griddynamics.jagger.engine.e1.aggregator.workload.MetricLogProcessor">
        <property name="hibernateTemplate" ref="hibernateTemplate"/>
        <property name="logAggregator" ref="chronologyLogAggregator"/>
        <property name="sessionIdProvider" ref="sessionIdProvider"/>
        <property name="intervalSizeProvider" ref="metricIntervalSizeProvider_${chassis.engine.e1.reporting.task.type}"/>
        <property name="fileStorage" ref="fileStorage"/>

        <property name="keyValueStorage" ref="h2KeyValueStorage"/>
        <property name="databaseService" ref="databaseService"/>

        <property name="logReader"  ref="bufferedLogReader"/>


    </bean>

    <bean id="profilerLogProcessor" class="com.griddynamics.jagger.engine.e1.aggregator.workload.ProfilerLogProcessor">
        <property name="hibernateTemplate" ref="hibernateTemplate"/>
        <property name="fileStorage" ref="fileStorage"/>
        <property name="logReader"  ref="bufferedLogReader"/>

        <property name="databaseService" ref="databaseService"/>
    </bean>

</beans>
